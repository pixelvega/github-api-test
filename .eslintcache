[{"/Users/pixelvega/Desktop/repos/tests/github-api-test/src/index.tsx":"1","/Users/pixelvega/Desktop/repos/tests/github-api-test/src/reportWebVitals.ts":"2","/Users/pixelvega/Desktop/repos/tests/github-api-test/src/routes/Routes.tsx":"3","/Users/pixelvega/Desktop/repos/tests/github-api-test/src/components/pages/Unknown/Unknown.tsx":"4","/Users/pixelvega/Desktop/repos/tests/github-api-test/src/components/pages/App/App.tsx":"5","/Users/pixelvega/Desktop/repos/tests/github-api-test/src/services/useGetRepositories.ts":"6","/Users/pixelvega/Desktop/repos/tests/github-api-test/src/components/blocks/Header/Header.tsx":"7","/Users/pixelvega/Desktop/repos/tests/github-api-test/src/components/blocks/Searcher/Searcher.tsx":"8","/Users/pixelvega/Desktop/repos/tests/github-api-test/src/context/SearcherContext.tsx":"9","/Users/pixelvega/Desktop/repos/tests/github-api-test/src/components/blocks/TableResults/TableResults.tsx":"10","/Users/pixelvega/Desktop/repos/tests/github-api-test/src/components/pages/Home/Home.tsx":"11","/Users/pixelvega/Desktop/repos/tests/github-api-test/src/components/blocks/Spinner/Spinner.tsx":"12"},{"size":680,"mtime":1610280010800,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1608927878276,"results":"15","hashOfConfig":"14"},{"size":503,"mtime":1610280010801,"results":"16","hashOfConfig":"14"},{"size":96,"mtime":1610280010795,"results":"17","hashOfConfig":"14"},{"size":434,"mtime":1610280010794,"results":"18","hashOfConfig":"14"},{"size":751,"mtime":1610280010802,"results":"19","hashOfConfig":"14"},{"size":381,"mtime":1610280010792,"results":"20","hashOfConfig":"14"},{"size":1396,"mtime":1610280010792,"results":"21","hashOfConfig":"14"},{"size":595,"mtime":1610280010796,"results":"22","hashOfConfig":"14"},{"size":2096,"mtime":1610280010793,"results":"23","hashOfConfig":"14"},{"size":447,"mtime":1610280010795,"results":"24","hashOfConfig":"14"},{"size":114,"mtime":1610280010793,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1wgd25n",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/pixelvega/Desktop/repos/tests/github-api-test/src/index.tsx",[],["54","55"],"/Users/pixelvega/Desktop/repos/tests/github-api-test/src/reportWebVitals.ts",[],"/Users/pixelvega/Desktop/repos/tests/github-api-test/src/routes/Routes.tsx",[],"/Users/pixelvega/Desktop/repos/tests/github-api-test/src/components/pages/Unknown/Unknown.tsx",[],"/Users/pixelvega/Desktop/repos/tests/github-api-test/src/components/pages/App/App.tsx",[],"/Users/pixelvega/Desktop/repos/tests/github-api-test/src/services/useGetRepositories.ts",[],"/Users/pixelvega/Desktop/repos/tests/github-api-test/src/components/blocks/Header/Header.tsx",[],"/Users/pixelvega/Desktop/repos/tests/github-api-test/src/components/blocks/Searcher/Searcher.tsx",["56","57"],"import { useContext, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { SearcherContext } from 'context/SearcherContext';\nimport { useHistory } from 'react-router-dom';\nimport './Searcher.scss';\n\nexport default function Searcher() {\n  const history = useHistory();\n  const { searcherQuery, setSearcherQuery } = useContext(SearcherContext);\n  const { register, handleSubmit, errors, setValue } = useForm();\n\n  const onSubmit = async (values: any) => {\n    const inputQuerySearcher = values.inputQuerySearcher;\n\n    if (inputQuerySearcher.length > 0 && inputQuerySearcher.length <= 256) {\n      setSearcherQuery(inputQuerySearcher);\n      history.push('/search');\n    }\n  }\n\n  useEffect(() => {\n    if (searcherQuery !== undefined && searcherQuery === '') {\n      setValue('inputQuerySearcher', '');\n    }\n  }, [searcherQuery])\n\n  return (\n    <form\n      onSubmit={handleSubmit(onSubmit)}\n      className=\"header-search\"\n    >\n      <label htmlFor=\"inputQuerySearcher\">\n        {/* <span className=\"label-text\">Buscar repositorio por lenguaje...</span> */}\n        <input\n          type=\"text\"\n          className=\"header-search__input\"\n          id=\"inputQuerySearcher\"\n          name=\"inputQuerySearcher\"\n          placeholder=\"Search repositories...\"\n          ref={register({ required: true })}\n          defaultValue={\"\"}\n        />\n      </label>\n    </form>\n  )\n}","/Users/pixelvega/Desktop/repos/tests/github-api-test/src/context/SearcherContext.tsx",[],"/Users/pixelvega/Desktop/repos/tests/github-api-test/src/components/blocks/TableResults/TableResults.tsx",["58"],"import { useEffect, useState, useContext } from 'react';\nimport { SearcherContext } from 'context/SearcherContext';\nimport useGetRepositories from 'services/useGetRepositories';\nimport { IGetRepositoriesResponse } from 'services/dto';\nimport Spinner from '../Spinner/Spinner';\n\nexport default function TableResults() {\n  const { searcherQuery } = useContext(SearcherContext);\n  const { getRepositories,\n    loading,\n    error } = useGetRepositories();\n  const [apiResults, setApiResults] = useState<IGetRepositoriesResponse | null>(null);\n\n  useEffect(() => {\n    const querySearch = searcherQuery;\n    if (querySearch.length > 0 && querySearch.length <= 256) {\n      handleGetRepositories(querySearch);\n    }\n  }, [searcherQuery])\n\n  const handleGetRepositories = async (querySearch: string) => {\n    const apiResults = await getRepositories(querySearch);\n    setApiResults(apiResults);\n  }\n\n  return (\n    <section>\n      {loading &&\n        <>\n          <h2>Buscando resultados para la búsqueda <em>\"{searcherQuery}\"</em></h2>\n          <Spinner />\n        </>\n      }\n      {(error && !loading) &&\n        <div>{error?.message}</div>\n      }\n      {!loading && !error && apiResults?.items &&\n\n        <table>\n          <caption>\n            Resultados de búsqueda para <em>\"{searcherQuery}\"</em>\n          </caption>\n          <thead>\n            <tr>\n              <th>Nombre</th>\n              <th>URL</th>\n            </tr>\n          </thead>\n          <tbody>\n            {apiResults.items.length >= 1 ?\n              <>\n                {apiResults.items.map((item: any) => {\n                  const { name, html_url, id } = item;\n                  return (\n                    <tr key={id}>\n                      <td>{name}</td>\n                      <td><a href={html_url}>{html_url}</a></td>\n                    </tr>\n                  )\n                })}\n              </>\n              :\n              <tr>\n                <td colSpan={2}>No hay resultados para tu búsqueda.</td>\n              </tr>\n            }\n          </tbody>\n        </table>\n      }\n    </section>\n  )\n}","/Users/pixelvega/Desktop/repos/tests/github-api-test/src/components/pages/Home/Home.tsx",["59"],"import { useContext, useEffect } from 'react';\nimport { SearcherContext } from 'context/SearcherContext';\nimport './Home.scss';\n\nexport default function Home() {\n  const { resetSearcherQuery } = useContext(SearcherContext);\n\n  useEffect(() => {\n    resetSearcherQuery()\n  }, [])\n\n  return (\n    <div className=\"Home\">\n      <div className=\"bg-img\"></div>\n      <h1>GitHub API Test</h1>\n      <p>Search repositories by language</p>\n    </div>\n  )\n}","/Users/pixelvega/Desktop/repos/tests/github-api-test/src/components/blocks/Spinner/Spinner.tsx",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":10,"column":35,"nodeType":"66","messageId":"67","endLine":10,"endColumn":41},{"ruleId":"68","severity":1,"message":"69","line":25,"column":6,"nodeType":"70","endLine":25,"endColumn":21,"suggestions":"71"},{"ruleId":"68","severity":1,"message":"72","line":19,"column":6,"nodeType":"70","endLine":19,"endColumn":21,"suggestions":"73"},{"ruleId":"68","severity":1,"message":"74","line":10,"column":6,"nodeType":"70","endLine":10,"endColumn":8,"suggestions":"75"},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"@typescript-eslint/no-unused-vars","'errors' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setValue'. Either include it or remove the dependency array.","ArrayExpression",["78"],"React Hook useEffect has a missing dependency: 'handleGetRepositories'. Either include it or remove the dependency array.",["79"],"React Hook useEffect has a missing dependency: 'resetSearcherQuery'. Either include it or remove the dependency array.",["80"],"no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},"Update the dependencies array to be: [searcherQuery, setValue]",{"range":"87","text":"88"},"Update the dependencies array to be: [handleGetRepositories, searcherQuery]",{"range":"89","text":"90"},"Update the dependencies array to be: [resetSearcherQuery]",{"range":"91","text":"92"},[836,851],"[searcherQuery, setValue]",[715,730],"[handleGetRepositories, searcherQuery]",[275,277],"[resetSearcherQuery]"]